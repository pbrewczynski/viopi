#!/usr/bin/env python3
#
# Recursively finds text files, concatenates their contents, and either copies
# the result to the clipboard or prints to stdout. A powerful tool for
# preparing project context for LLMs.
#
# This script is a controller for the core logic in `viopi_utils.py`.
#
# Usage:
#   viopi [path] [preset_or_pattern_1] ...    # Copies to clipboard
#   viopi --stdout [path] [p_or_p_1] ...      # Prints to stdout (for piping)
#
# New ignore files loaded: .viopi_ignore, .viopi_ignore_global
#

import sys
from pathlib import Path

# Attempt to import shared logic. Provide a helpful error if it's missing.
try:
    from viopi_utils import generate_project_context
except ImportError:
    print("Error: The 'viopi_utils.py' module was not found.", file=sys.stderr)
    print("Please make sure viopi_utils.py is in the same directory as this script.", file=sys.stderr)
    sys.exit(1)


def main():
    """Parses arguments, calls the core logic, and handles the final output."""
    args = sys.argv[1:]
    
    # --- Determine Mode (Clipboard vs. Stdout) ---
    stdout_mode = False
    if "--stdout" in args:
        stdout_mode = True
        args.remove("--stdout")

    # --- Separate Path Argument from Patterns ---
    path_args, pattern_args = [], []
    for arg in args:
        # A simple check: if it looks like an existing directory, it's a path.
        if Path(arg).is_dir():
            path_args.append(arg)
        else:
            pattern_args.append(arg)
    
    if len(path_args) > 1:
        print(f"‚ö†Ô∏è  Warning: Multiple directory paths provided. Using the first one: '{path_args[0]}'", file=sys.stderr)
    
    root_dir = Path(path_args[0]).resolve() if path_args else Path.cwd().resolve()

    # --- Run Core Logic ---
    print(f"üöÄ Processing directory: {root_dir}", file=sys.stderr)
    final_output, summary_report = generate_project_context(root_dir, pattern_args)
    
    # Print status and summary reports to stderr so they don't interfere with stdout
    print(summary_report, file=sys.stderr)

    # --- Handle Final Output ---
    if stdout_mode:
        print(final_output)
        print("\n‚úÖ Done. Output sent to stdout.", file=sys.stderr)
    else:
        try:
            import pyperclip
            pyperclip.copy(final_output)
            print("\n‚úÖ Combined contents copied to the clipboard.", file=sys.stderr)
        except (ImportError, pyperclip.PyperclipException) as e:
            print("\n‚ùå Error: Could not copy to clipboard.", file=sys.stderr)
            print("   'pyperclip' may not be installed or configured.", file=sys.stderr)
            print("   Install it (`pip install pyperclip`) or use the --stdout flag.", file=sys.stderr)
            print(f"   Details: {e}", file=sys.stderr)
            sys.exit(1)


if __name__ == "__main__":
    main()