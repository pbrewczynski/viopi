#!/usr/bin/env python3
#
# Recursively finds text files in a specified directory, concatenates their
# contents, and prints the result to standard output. A powerful tool for
# preparing project context for LLMs.
#
# Usage:
#   ./viopi [path_to_directory] [preset_or_pattern_1] ... | pbcopy
#
import os
import sys
import fnmatch
from pathlib import Path
import subprocess
import magic

# --- Configuration ---
PRESET_PREFIX = ".copy_combine_ignore_preset_"
LOCAL_IGNORE_FILE = ".copy_combine_ignore"
GLOBAL_IGNORE_FILE = Path.home() / ".copy_combine_ignore_global"
PRESET_ALIASES = {
    ".xcode_project": ".xcode_strict", ".macos_app": ".xcode_strict",
    ".ios_app": ".xcode_strict", ".visionos_app": ".xcode_strict",
    ".watchos_app": ".xcode_strict", ".react_app": ".node_project",
    ".vue_app": ".node_project", ".svelte_app": ".node_project",
    ".nextjs_app": ".node_project",
}

# --- Helper Functions ---

def is_binary(file_path: Path) -> bool:
    """
    Uses python-magic to determine if a file is binary.
    Returns True for binary files, False for text files or empty files.
    This version is updated to correctly handle JSON, JS, and other text-like files.
    """
    if not file_path.is_file() or file_path.stat().st_size == 0:
        return False  # Treat empty files or non-files as text/ignorable

    # +++ THIS IS THE FIX +++
    # Define a set of known text-friendly MIME types.
    # 'application/...' types are often text but not classified as 'text/...'
    KNOWN_TEXT_MIMES = {
        'application/json',
        'application/javascript',
        'application/xml',
        'application/x-sh',      # Shell scripts
        'application/x-python',  # Python scripts
    }

    try:
        mime_type = magic.from_file(str(file_path), mime=True)
        # A file is NOT binary if its MIME type starts with 'text/'
        # OR if it's in our known set of text-like application types.
        if mime_type.startswith("text/") or mime_type in KNOWN_TEXT_MIMES:
            return False
        
        # As a fallback, some systems might report a generic 'application/octet-stream'
        # for text files they don't recognize. We can try to read it.
        if mime_type == 'application/octet-stream' or mime_type == 'inode/x-empty':
             # Fall through to the read-based check below.
             pass
        else:
            # If it's a known non-text type (e.g., image/jpeg), it's binary.
            return True

    except magic.MagicException:
        # If python-magic fails, we proceed to the fallback method.
        pass

    # Fallback check for when magic is unsure or unavailable
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            f.read(1024)  # Try reading a small chunk
        return False  # If it reads successfully, it's text.
    except (UnicodeDecodeError, IOError):
        return True  # If it fails to decode, it's almost certainly binary.

def get_preset_patterns(preset_name: str) -> list[str]:
    preset_filename_suffix = preset_name.lstrip('.')
    preset_file = Path.home() / f"{PRESET_PREFIX}{preset_filename_suffix}"
    if preset_file.is_file():
        return [
            line for line in preset_file.read_text().splitlines()
            if line.strip() and not line.strip().startswith("#")
        ]
    return []

# The rest of the main() function is unchanged and correct.
def main():
    path_args, pattern_args = [], []
    for arg in sys.argv[1:]:
        if Path(arg).is_dir(): path_args.append(arg)
        else: pattern_args.append(arg)
    
    if len(path_args) > 1: print(f"‚ö†Ô∏è  Warning: Multiple directory paths provided. Using the first one: '{path_args[0]}'", file=sys.stderr)
    
    root_dir = Path(path_args[0]).resolve() if path_args else Path.cwd().resolve()
    print(f"üöÄ Processing directory: {root_dir}", file=sys.stderr)

    ignore_patterns = {".DS_Store", LOCAL_IGNORE_FILE, Path(__file__).name}
    sources_of_ignores = {"Defaults": list(ignore_patterns)}

    for ignore_file in [GLOBAL_IGNORE_FILE, root_dir / LOCAL_IGNORE_FILE]:
        if ignore_file.is_file():
            patterns = [line for line in ignore_file.read_text().splitlines() if line.strip() and not line.strip().startswith("#")]
            if patterns:
                sources_of_ignores[str(ignore_file.relative_to(ignore_file.parent.parent))] = patterns
                ignore_patterns.update(patterns)

    activated_presets, literal_args = set(), []
    for arg in pattern_args:
        preset_to_check = PRESET_ALIASES.get(arg, arg)
        patterns = get_preset_patterns(preset_to_check)
        if patterns:
            activated_presets.add(arg)
            sources_of_ignores[f"Preset: {arg}"] = patterns
            ignore_patterns.update(patterns)
        else:
            literal_args.append(arg)
    if literal_args:
        sources_of_ignores["Arguments"] = literal_args
        ignore_patterns.update(literal_args)

    print("üîé Activating ignore patterns...", file=sys.stderr)
    for source, patterns in sources_of_ignores.items():
        print(f"  - From {source}:", file=sys.stderr)
        for p in sorted(patterns):
            print(f"    - {p}", file=sys.stderr)
    print("----------------------------------------", file=sys.stderr)

    files_to_cat = []
    for root, dirs, files in os.walk(root_dir, topdown=True, followlinks=False):
        current_path = Path(root)
        dirs[:] = [d for d in dirs if not any(fnmatch.fnmatch(d, p) or fnmatch.fnmatch(str((current_path / d).relative_to(root_dir)), p) for p in ignore_patterns)]
        for filename in files:
            file_path = current_path / filename
            relative_path_str = str(file_path.relative_to(root_dir))
            if any(fnmatch.fnmatch(filename, p) or fnmatch.fnmatch(relative_path_str, p) for p in ignore_patterns):
                continue
            if is_binary(file_path):
                continue
            files_to_cat.append(file_path)

    output_parts = []
    output_parts.append(f"Current path: {root_dir}\n")
    try:
        tree_cmd = ["tree"] + [arg for p in set(ignore_patterns) for arg in ["-I", p]]
        if subprocess.run(["command", "-v", "tree"], capture_output=True, text=True).returncode == 0:
            tree_output = "Directory tree (ignoring specified patterns):\n"
            tree_output += subprocess.check_output(tree_cmd, cwd=root_dir, text=True)
        else:
            tree_output = "Directory tree: ('tree' command not found, skipping)"
    except Exception as e:
        tree_output = f"Directory tree: (failed to generate: {e})"
    output_parts.append(tree_output)
    output_parts.append("\n\n---\nCombined file contents:\n")
    if not files_to_cat:
        output_parts.append("No text files found to copy after applying ignore patterns.")
    else:
        for file_path in sorted(files_to_cat):
            try:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    output_parts.append(f"\n--- FILE: {file_path.relative_to(root_dir)} ---\n")
                    output_parts.append(content)
            except Exception as e:
                output_parts.append(f"\n--- ERROR: Could not read {file_path.relative_to(root_dir)}: {e} ---\n")
    final_output = "".join(output_parts)
    print(final_output)
    print("\n‚úÖ Done. Output sent to stdout.", file=sys.stderr)
    if activated_presets:
        print("Activated presets:", file=sys.stderr)
        for preset in sorted(list(activated_presets)):
            print(f"  - {preset}", file=sys.stderr)

if __name__ == "__main__":
    main()
